}
# Define UI
ui <- fluidPage(
titlePanel("Interactive Cluster Assignment Visualization"),
sidebarLayout(
sidebarPanel(
numericInput("n_points", "Number of Data Points:", value = 50, min = 10, max = 500),
numericInput("n_centers", "Number of Cluster Centers:", value = 3, min = 1, max = 10),
actionButton("generate", "Generate Data"),
verbatimTextOutput("selected_info")
),
mainPanel(
plotlyOutput("clusterPlot")
)
)
)
# Define server logic
server <- function(input, output, session) {
data <- reactiveVal()
observeEvent(input$generate, {
# Generate data points and centers
generated_data <- generate_data(input$n_points, input$n_centers, c(-10, 10), c(-10, 10))
data_points <- generated_data$data_points
centers <- generated_data$centers
# Assign clusters
data_points <- assign_clusters(data_points, centers)
# Store data
data(list(data_points = data_points, centers = centers))
})
output$clusterPlot <- renderPlotly({
req(data())
create_plot(data()$data_points, data()$centers)
})
output$selected_info <- renderPrint({
event_data <- event_data("plotly_click", source = "plot")
if (is.null(event_data)) {
cat("Click on a point to see its details\n")
} else {
selected_index <- event_data$pointNumber + 1
selected_point <- data()$data_points[selected_index, ]
cat("Selected Point:\n")
print(selected_point)
}
})
observeEvent(event_data("plotly_click", source = "plot"), {
event_data <- event_data("plotly_click", source = "plot")
selected_index <- event_data$pointNumber + 1
output$clusterPlot <- renderPlotly({
req(data())
create_plot(data()$data_points, data()$centers, selected_point = selected_index)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(ggplot2)
library(plotly)
# Function to generate random data points and cluster centers
generate_data <- function(n_points, n_centers, xlim, ylim) {
# Generate random data points
data_points <- data.frame(
x = runif(n_points, min = xlim[1], max = xlim[2]),
y = runif(n_points, min = ylim[1], max = ylim[2])
)
# Generate random cluster centers
centers <- data.frame(
x = runif(n_centers, min = xlim[1], max = xlim[2]),
y = runif(n_centers, min = ylim[1], max = ylim[2])
)
list(data_points = data_points, centers = centers)
}
# Function to assign clusters based on minimum distance
assign_clusters <- function(data_points, centers) {
# Calculate distance matrix
dist_matrix <- as.matrix(dist(rbind(data_points, centers)))[1:nrow(data_points), (nrow(data_points) + 1):(nrow(data_points) + nrow(centers))]
# Assign each point to the nearest center
cluster_assignments <- apply(dist_matrix, 1, which.min)
data_points$cluster <- factor(cluster_assignments)
data_points
}
# Function to create the plot with lines connecting points to their cluster centers
create_plot <- function(data_points, centers, selected_point = NULL) {
p <- ggplot() +
geom_point(data = data_points, aes(x = x, y = y, color = cluster), size = 2) +
geom_point(data = centers, aes(x = x, y = y), color = "red", size = 4, shape = 8) +
labs(title = "Cluster Assignments with Connections to Centers",
x = "X Coordinate", y = "Y Coordinate") +
theme_minimal() +
scale_color_discrete(name = "Cluster")
# Add lines from each point to its assigned cluster center
for (i in 1:nrow(data_points)) {
center <- centers[as.numeric(data_points$cluster[i]), ]
p <- p + geom_segment(aes(x = data_points$x[i], y = data_points$y[i],
xend = center$x, yend = center$y),
color = "gray", linetype = "dashed")
}
# Highlight the selected point and its connection
if (!is.null(selected_point)) {
selected_data <- data_points[selected_point, ]
selected_center <- centers[as.numeric(selected_data$cluster), ]
p <- p +
geom_point(data = selected_data, aes(x = x, y = y), color = "black", size = 4, shape = 17) +
geom_segment(aes(x = selected_data$x, y = selected_data$y,
xend = selected_center$x, yend = selected_center$y),
color = "black", linetype = "solid", size = 1)
}
ggplotly(p, source = "plot") %>% config(displayModeBar = FALSE)
}
# Define UI
ui <- fluidPage(
titlePanel("Interactive Cluster Assignment Visualization"),
sidebarLayout(
sidebarPanel(
numericInput("n_points", "Number of Data Points:", value = 50, min = 10, max = 500),
numericInput("n_centers", "Number of Cluster Centers:", value = 3, min = 1, max = 10),
actionButton("generate", "Generate Data"),
verbatimTextOutput("selected_info")
),
mainPanel(
plotlyOutput("clusterPlot")
)
)
)
# Define server logic
server <- function(input, output, session) {
data <- reactiveVal()
observeEvent(input$generate, {
# Generate data points and centers
generated_data <- generate_data(input$n_points, input$n_centers, c(-10, 10), c(-10, 10))
data_points <- generated_data$data_points
centers <- generated_data$centers
# Assign clusters
data_points <- assign_clusters(data_points, centers)
# Store data
data(list(data_points = data_points, centers = centers))
})
output$clusterPlot <- renderPlotly({
req(data())
create_plot(data()$data_points, data()$centers)
})
output$selected_info <- renderPrint({
event_data <- event_data("plotly_click", source = "plot")
if (is.null(event_data)) {
cat("Click on a point to see its details\n")
} else {
selected_index <- event_data$pointNumber + 1
selected_point <- data()$data_points[selected_index, ]
cat("Selected Point:\n")
print(selected_point)
}
})
observeEvent(event_data("plotly_click", source = "plot"), {
event_data <- event_data("plotly_click", source = "plot")
selected_index <- event_data$pointNumber + 1
output$clusterPlot <- renderPlotly({
req(data())
create_plot(data()$data_points, data()$centers, selected_point = selected_index)
})
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(ggplot2)
# Function to calculate Euclidean distance
euclidean_distance <- function(a, b) {
sqrt(sum((a - b)^2))
}
# Function to assign clusters based on minimum distance
assign_clusters <- function(data_points, centers) {
cluster_assignments <- sapply(1:nrow(data_points), function(i) {
distances <- apply(centers, 1, function(center) euclidean_distance(data_points[i, ], center))
which.min(distances)
})
data_points$cluster <- factor(cluster_assignments)
data_points
}
# Function to create the plot
create_plot <- function(data_points, centers, selected_point = NULL) {
p <- ggplot() +
geom_point(data = data_points, aes(x = x, y = y, color = cluster), size = 3) +
geom_point(data = centers, aes(x = x, y = y), color = "red", size = 5, shape = 8) +
labs(title = "Cluster Assignments Based on Minimum Distance",
x = "X Coordinate", y = "Y Coordinate") +
theme_minimal() +
scale_color_discrete(name = "Cluster")
if (!is.null(selected_point)) {
selected_data <- data_points[selected_point, ]
p <- p +
geom_point(data = selected_data, aes(x = x, y = y), color = "black", size = 4, shape = 17) +
geom_segment(data = centers, aes(x = selected_data$x, y = selected_data$y, xend = x, yend = y),
color = "gray", linetype = "dashed")
}
p
}
# Generate fixed data points and cluster centers
set.seed(123)
data_points <- data.frame(
x = runif(10, min = -10, max = 10),
y = runif(10, min = -10, max = 10)
)
centers <- data.frame(
x = runif(3, min = -10, max = 10),
y = runif(3, min = -10, max = 10)
)
# Assign clusters
data_points <- assign_clusters(data_points, centers)
# Define UI
ui <- fluidPage(
titlePanel("Cluster Assignment Based on Minimum Distance"),
sidebarLayout(
sidebarPanel(
sliderInput("point_index", "Select Data Point Index:",
min = 1, max = nrow(data_points), value = 1, step = 1)
),
mainPanel(
plotOutput("clusterPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$clusterPlot <- renderPlot({
create_plot(data_points, centers, input$point_index)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(ggplot2)
# Function to calculate Euclidean distance
euclidean_distance <- function(a, b) {
sqrt(sum((a - b)^2))
}
# Function to assign clusters based on minimum distance
assign_clusters <- function(data_points, centers) {
cluster_assignments <- sapply(1:nrow(data_points), function(i) {
distances <- apply(centers, 1, function(center) euclidean_distance(data_points[i, ], center))
which.min(distances)
})
data_points$cluster <- factor(cluster_assignments)
data_points
}
# Function to create the plot
create_plot <- function(data_points, centers, selected_point = NULL) {
p <- ggplot() +
geom_point(data = data_points, aes(x = x, y = y, color = cluster), size = 3) +
geom_point(data = centers, aes(x = x, y = y), color = "red", size = 5, shape = 8) +
labs(title = "Cluster Assignments Based on Minimum Distance",
x = "X Coordinate", y = "Y Coordinate") +
theme_minimal() +
scale_color_discrete(name = "Cluster")
if (!is.null(selected_point)) {
selected_data <- data_points[selected_point, ]
p <- p +
geom_point(data = selected_data, aes(x = x, y = y), color = "black", size = 4, shape = 17) +
geom_segment(data = centers, aes(x = selected_data$x, y = selected_data$y, xend = x, yend = y),
color = "gray", linetype = "dashed")
}
p
}
# Generate fixed data points and cluster centers
set.seed(123)
data_points <- data.frame(
x = runif(10, min = -10, max = 10),
y = runif(10, min = -10, max = 10)
)
centers <- data.frame(
x = runif(3, min = -10, max = 10),
y = runif(3, min = -10, max = 10)
)
# Assign clusters
data_points <- assign_clusters(data_points, centers)
# Define UI
ui <- fluidPage(
titlePanel("Cluster Assignment Based on Minimum Distance"),
sidebarLayout(
sidebarPanel(
sliderInput("point_index", "Select Data Point Index:",
min = 1, max = nrow(data_points), value = 1, step = 1)
),
mainPanel(
plotOutput("clusterPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$clusterPlot <- renderPlot({
create_plot(data_points, centers, input$point_index)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(ggplot2)
# Function to calculate Euclidean distance
euclidean_distance <- function(a, b) {
sqrt(sum((a - b)^2))
}
# Function to assign clusters based on minimum distance
assign_clusters <- function(data_points, centers) {
cluster_assignments <- sapply(1:nrow(data_points), function(i) {
distances <- apply(centers, 1, function(center) euclidean_distance(data_points[i, ], center))
which.min(distances)
})
data_points$cluster <- factor(cluster_assignments)
data_points
}
# Function to create the plot
create_plot <- function(data_points, centers, selected_point = NULL) {
p <- ggplot() +
geom_point(data = data_points, aes(x = x, y = y), color = "blue", size = 3) +
geom_point(data = centers, aes(x = x, y = y), color = "red", size = 5, shape = 8) +
labs(title = "Data Points and Cluster Centers",
x = "X Coordinate", y = "Y Coordinate") +
theme_minimal()
if (!is.null(selected_point)) {
selected_data <- data_points[selected_point, ]
distances <- apply(centers, 1, function(center) euclidean_distance(selected_data[, c("x", "y")], center))
closest_center <- which.min(distances)
p <- p +
geom_point(data = selected_data, aes(x = x, y = y), color = "black", size = 4, shape = 17) +
geom_segment(data = centers, aes(x = selected_data$x, y = selected_data$y, xend = x, yend = y),
color = "gray", linetype = "dashed") +
geom_segment(aes(x = selected_data$x, y = selected_data$y,
xend = centers[closest_center, "x"], yend = centers[closest_center, "y"]),
color = "green", linetype = "solid") +
labs(subtitle = paste("Selected Point Assigned to Center:", closest_center))
}
p
}
# Generate fixed data points and cluster centers
set.seed(123)
data_points <- data.frame(
x = runif(10, min = -10, max = 10),
y = runif(10, min = -10, max = 10)
)
centers <- data.frame(
x = runif(3, min = -10, max = 10),
y = runif(3, min = -10, max = 10)
)
# Assign clusters
data_points <- assign_clusters(data_points, centers)
# Define UI
ui <- fluidPage(
titlePanel("Cluster Assignment Based on Minimum Distance"),
sidebarLayout(
sidebarPanel(
sliderInput("point_index", "Select Data Point Index:",
min = 1, max = nrow(data_points), value = 1, step = 1)
),
mainPanel(
plotOutput("clusterPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$clusterPlot <- renderPlot({
create_plot(data_points, centers, input$point_index)
})
}
# Run the application
shinyApp(ui = ui, server = server)
setwd("~/Library/CloudStorage/OneDrive-ConcordiaUniversity-Canada/Concordia_folder/BIOL801/BIOL680_LECTURE/BIOL680_W2025_Lecture/shiny_app")
rsconnect::deployApp()
rsconnect::deployApp()
# Load required libraries
library(shiny)
library(ggplot2)
# Function to calculate Euclidean distance
euclidean_distance <- function(a, b) {
sqrt(sum((a - b)^2))
}
# Function to assign clusters based on minimum distance
assign_clusters <- function(data_points, centers) {
cluster_assignments <- sapply(1:nrow(data_points), function(i) {
distances <- apply(centers, 1, function(center) euclidean_distance(data_points[i, ], center))
which.min(distances)
})
data_points$cluster <- factor(cluster_assignments)
data_points
}
# Function to create the plot
create_plot <- function(data_points, centers, selected_point = NULL) {
p <- ggplot() +
geom_point(data = data_points, aes(x = x, y = y, color = cluster), size = 3) +
geom_point(data = centers, aes(x = x, y = y), color = "red", size = 5, shape = 8) +
labs(title = "Cluster Assignments Based on Minimum Distance",
x = "X Coordinate", y = "Y Coordinate") +
theme_minimal() +
scale_color_discrete(name = "Cluster")
if (!is.null(selected_point)) {
selected_data <- data_points[selected_point, ]
p <- p +
geom_point(data = selected_data, aes(x = x, y = y), color = "black", size = 4, shape = 17) +
geom_segment(data = centers, aes(x = selected_data$x, y = selected_data$y, xend = x, yend = y),
color = "gray", linetype = "dashed")
}
p
}
# Generate fixed data points and cluster centers
set.seed(123)
data_points <- data.frame(
x = runif(10, min = -10, max = 10),
y = runif(10, min = -10, max = 10)
)
centers <- data.frame(
x = runif(3, min = -10, max = 10),
y = runif(3, min = -10, max = 10)
)
# Assign clusters
data_points <- assign_clusters(data_points, centers)
# Define UI
ui <- fluidPage(
titlePanel("Cluster Assignment Based on Minimum Distance"),
sidebarLayout(
sidebarPanel(
sliderInput("point_index", "Select Data Point Index:",
min = 1, max = nrow(data_points), value = 1, step = 1)
),
mainPanel(
plotOutput("clusterPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$clusterPlot <- renderPlot({
create_plot(data_points, centers, input$point_index)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Load required libraries
library(shiny)
library(ggplot2)
# Function to calculate Euclidean distance
euclidean_distance <- function(a, b) {
sqrt(sum((a - b)^2))
}
# Function to assign clusters based on minimum distance
assign_clusters <- function(data_points, centers) {
cluster_assignments <- sapply(1:nrow(data_points), function(i) {
distances <- apply(centers, 1, function(center) euclidean_distance(data_points[i, ], center))
which.min(distances)
})
data_points$cluster <- factor(cluster_assignments)
data_points
}
# Function to create the plot
create_plot <- function(data_points, centers, selected_point = NULL) {
p <- ggplot() +
geom_point(data = data_points, aes(x = x, y = y), color = "blue", size = 3) +
geom_point(data = centers, aes(x = x, y = y), color = "red", size = 5, shape = 8) +
labs(title = "Data Points and Cluster Centers",
x = "X Coordinate", y = "Y Coordinate") +
theme_minimal()
if (!is.null(selected_point)) {
selected_data <- data_points[selected_point, ]
distances <- apply(centers, 1, function(center) euclidean_distance(selected_data[, c("x", "y")], center))
closest_center <- which.min(distances)
p <- p +
geom_point(data = selected_data, aes(x = x, y = y), color = "black", size = 4, shape = 17) +
geom_segment(data = centers, aes(x = selected_data$x, y = selected_data$y, xend = x, yend = y),
color = "gray", linetype = "dashed") +
geom_segment(aes(x = selected_data$x, y = selected_data$y,
xend = centers[closest_center, "x"], yend = centers[closest_center, "y"]),
color = "green", linetype = "solid") +
labs(subtitle = paste("Selected Point Assigned to Center:", closest_center))
}
p
}
# Generate fixed data points and cluster centers
set.seed(123)
data_points <- data.frame(
x = runif(10, min = -10, max = 10),
y = runif(10, min = -10, max = 10)
)
centers <- data.frame(
x = runif(3, min = -10, max = 10),
y = runif(3, min = -10, max = 10)
)
# Assign clusters
data_points <- assign_clusters(data_points, centers)
# Define UI
ui <- fluidPage(
titlePanel("Cluster Assignment Based on Minimum Distance"),
sidebarLayout(
sidebarPanel(
sliderInput("point_index", "Select Data Point Index:",
min = 1, max = nrow(data_points), value = 1, step = 1)
),
mainPanel(
plotOutput("clusterPlot")
)
)
)
# Define server logic
server <- function(input, output) {
output$clusterPlot <- renderPlot({
create_plot(data_points, centers, input$point_index)
})
}
# Run the application
shinyApp(ui = ui, server = server)
